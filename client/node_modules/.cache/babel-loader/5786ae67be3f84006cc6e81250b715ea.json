{"ast":null,"code":"var _s = $RefreshSig$();\nimport { createContext, useState } from 'react';\nimport jsTPS from '../common/jsTPS';\nimport api from '../api';\nexport const GlobalStoreContext = /*#__PURE__*/createContext({});\n/*\r\n    This is our global data store. Note that it uses the Flux design pattern,\r\n    which makes use of things like actions and reducers. \r\n    \r\n    @author McKilla Gorilla\r\n*/\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n  DELETE_LIST: \"DELETE_LIST\"\n};\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nexport const useGlobalStore = () => {\n  _s();\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    newListCounter: 0,\n    listNameActive: false\n  });\n\n  // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n    switch (type) {\n      // LIST UPDATE OF ITS NAME\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: payload.playlist,\n            newListCounter: store.newListCounter,\n            listNameActive: false\n          });\n        }\n      // STOP EDITING THE CURRENT LIST\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false\n          });\n        }\n      // CREATE A NEW LIST\n      case GlobalStoreActionType.CREATE_NEW_LIST:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: payload.playlist,\n            newListCounter: store.newListCounter + 1,\n            listNameActive: false\n          });\n        }\n      // DELETE A LIST\n      case GlobalStoreActionType.DELETE_LIST:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false\n          });\n        }\n      // PREPARE TO DELETE A LIST\n      case GlobalStoreActionType.MARK_LIST_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false\n          });\n        }\n      // UPDATE A LIST\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: false\n          });\n        }\n      // START EDITING A LIST NAME\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: true\n          });\n        }\n      default:\n        return store;\n    }\n  };\n  // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n  // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n  store.changeListName = function (id, newName) {\n    // GET THE LIST\n    // (async () => {\n    //     try {\n    //         let res = await api.getPlaylistById(id);\n    //         if (res.data.success) {\n    //             let playlist = res.data.playlist;\n    //             res = await api.updatePlaylistById(playlist._id, {name: newName, songs: playlist.songs,});\n    //             if (res.data.success) {\n    //                 res = await api.getPlaylistPairs();\n    //                 let pairsArray = res.data.idNamePairs;\n    //                 storeReducer({\n    //                     type: GlobalStoreActionType.CHANGE_LIST_NAME,\n    //                     payload: {\n    //                         idNamePairs: pairsArray,\n    //                         playlist: { ...playlist, name: newName},\n    //                     },\n    //                 });\n    //             }\n    //             else {\n    //                 throw res;\n    //             }\n    //         }\n    //     } \n    //     catch (exception) \n    //     {\n    //         console.log(exception)\n    //     }\n    // })();\n    async function asyncChangeListName(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        playlist.name = newName;\n        async function updateList(playlist) {\n          response = await api.updatePlaylistById(playlist._id, {\n            name: newName,\n            songs: playlist.songs\n          });\n          if (response.data.success) {\n            async function getListPairs(playlist) {\n              response = await api.getPlaylistPairs();\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    playlist: playlist\n                  }\n                });\n              }\n            }\n            getListPairs(playlist);\n          }\n        }\n        updateList(playlist);\n      }\n    }\n    asyncChangeListName(id);\n  };\n  store.createNewList = function (playlist) {\n    (async () => {\n      try {\n        let res = await api.createPlaylist(playlist);\n        if (res.data.success) {\n          let playlist = res.data.playlist;\n          res = await api.getPlaylistPairs();\n          if (res.data.success) {\n            let pairsArray = res.data.idNamePairs;\n            storeReducer({\n              type: GlobalStoreActionType.CREATE_NEW_LIST,\n              payload: {\n                idNamePairs: pairsArray,\n                playlist: playlist\n              }\n            });\n          }\n        }\n      } catch (exception) {\n        console.error(exception);\n      }\n    })();\n  };\n  store.setIsListNameEditActive = function (id) {\n    (async () => {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        storeReducer({\n          type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n          payload: playlist\n        });\n      }\n    })();\n  };\n  store.deleteListById = function (id) {\n    async function asyncDeleteListById(id) {\n      let response = await api.deletePlaylistById(id);\n      if (response.data.success) {\n        response = await api.getPlaylistPairs();\n        if (response.data.success) {\n          let pairsArray = response.data.idNamePairs;\n          storeReducer({\n            type: GlobalStoreActionType.DELETE_LIST,\n            payload: pairsArray\n          });\n        }\n      }\n    }\n    asyncDeleteListById(id);\n  };\n\n  // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n  store.closeCurrentList = function () {\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n  };\n\n  // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n  store.loadIdNamePairs = function () {\n    async function asyncLoadIdNamePairs() {\n      const response = await api.getPlaylistPairs();\n      if (response.data.success) {\n        let pairsArray = response.data.idNamePairs;\n        storeReducer({\n          type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n          payload: pairsArray\n        });\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n    asyncLoadIdNamePairs();\n  };\n  store.setCurrentList = function (id) {\n    async function asyncSetCurrentList(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: playlist\n          });\n          store.history.push(\"/playlist/\" + playlist._id);\n        }\n      }\n    }\n    asyncSetCurrentList(id);\n  };\n  store.updateCurrentList = function (id, playlist) {\n    async function asyncUpdateCurrentList(id, playlist) {\n      let response = await api.updatePlaylistById(id, playlist);\n      if (response.data.success) {\n        response = await api.getPlaylistById(id);\n        if (response.data.success) {\n          let playlist = response.data.playlist;\n          if (response.data.success) {\n            storeReducer({\n              type: GlobalStoreActionType.SET_CURRENT_LIST,\n              payload: playlist\n            });\n          }\n        }\n      }\n    }\n    asyncUpdateCurrentList(id, playlist);\n  };\n  store.getPlaylistSize = function () {\n    return store.currentList.songs.length;\n  };\n  store.undo = function () {\n    tps.undoTransaction();\n  };\n  store.redo = function () {\n    tps.doTransaction();\n  };\n\n  // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n  store.setlistNameActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: null\n    });\n  };\n  store.moveSong = function (sourceId, targetId) {\n    if (sourceId !== targetId) {\n      let playlist = store.currentList;\n      let songs = playlist.songs;\n      let temp = songs[targetId];\n      const name = playlist.name;\n      const id = playlist._id;\n      songs[targetId] = songs[sourceId];\n      songs[sourceId] = temp;\n      store.updateCurrentList(id, {\n        name,\n        songs\n      });\n    }\n  };\n  store.editSong = function (index, song) {\n    let playlist = store.currentList;\n    let songs = playlist.songs;\n    const name = playlist.name;\n    const id = playlist._id;\n    songs[index] = song;\n    store.updateCurrentList(id, {\n      name,\n      songs\n    });\n  };\n  store.addSong = function (index, song) {\n    let playlist = store.currentList;\n    let newSongs = [];\n    const name = playlist.name;\n    const id = playlist._id;\n    for (let i = 0; i < index; i++) {\n      newSongs.push(playlist.songs[i]);\n    }\n    newSongs.push(song);\n    for (let i = index; i < playlist.songs.length; i++) {\n      newSongs.push(playlist.songs[i]);\n    }\n    store.updateCurrentList(id, {\n      name,\n      songs: newSongs\n    });\n  };\n  store.deleteSong = function (index) {\n    let playlist = store.currentList;\n    let songs = [...playlist.songs];\n    const name = playlist.name;\n    const id = playlist._id;\n    songs.splice(index, 1);\n    store.updateCurrentList(id, {\n      name,\n      songs\n    });\n  };\n\n  // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n  return {\n    store,\n    tps,\n    storeReducer\n  };\n};\n_s(useGlobalStore, \"4Ues7bvEwHvjt0AmOBwm7k2p1gU=\");","map":{"version":3,"names":["createContext","useState","jsTPS","api","GlobalStoreContext","GlobalStoreActionType","CHANGE_LIST_NAME","CLOSE_CURRENT_LIST","CREATE_NEW_LIST","LOAD_ID_NAME_PAIRS","SET_CURRENT_LIST","SET_LIST_NAME_EDIT_ACTIVE","DELETE_LIST","tps","useGlobalStore","store","setStore","idNamePairs","currentList","newListCounter","listNameActive","storeReducer","action","type","payload","playlist","MARK_LIST_FOR_DELETION","changeListName","id","newName","asyncChangeListName","response","getPlaylistById","data","success","name","updateList","updatePlaylistById","_id","songs","getListPairs","getPlaylistPairs","pairsArray","createNewList","res","createPlaylist","exception","console","error","setIsListNameEditActive","deleteListById","asyncDeleteListById","deletePlaylistById","closeCurrentList","loadIdNamePairs","asyncLoadIdNamePairs","log","setCurrentList","asyncSetCurrentList","history","push","updateCurrentList","asyncUpdateCurrentList","getPlaylistSize","length","undo","undoTransaction","redo","doTransaction","setlistNameActive","moveSong","sourceId","targetId","temp","editSong","index","song","addSong","newSongs","i","deleteSong","splice"],"sources":["C:/Users/aarya/OneDrive/Documents/SBU/CSE 316/Playlister_HW3/Playlister_HW3/client/src/store/index.js"],"sourcesContent":["import { createContext, useState } from 'react'\r\nimport jsTPS from '../common/jsTPS'\r\nimport api from '../api'\r\nexport const GlobalStoreContext = createContext({});\r\n/*\r\n    This is our global data store. Note that it uses the Flux design pattern,\r\n    which makes use of things like actions and reducers. \r\n    \r\n    @author McKilla Gorilla\r\n*/\r\n\r\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\r\n// DATA STORE STATE THAT CAN BE PROCESSED\r\nexport const GlobalStoreActionType = {\r\n    CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\r\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\r\n    CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\r\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\r\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\r\n    SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\r\n    DELETE_LIST: \"DELETE_LIST\",\r\n};\r\n\r\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\r\nconst tps = new jsTPS();\r\n\r\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\r\n// AVAILABLE TO THE REST OF THE APPLICATION\r\nexport const useGlobalStore = () => {\r\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\r\n    const [store, setStore] = useState({\r\n        idNamePairs: [],\r\n        currentList: null,\r\n        newListCounter: 0,\r\n        listNameActive: false\r\n    });\r\n\r\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\r\n    // HANDLE EVERY TYPE OF STATE CHANGE\r\n    const storeReducer = (action) => {\r\n        const { type, payload } = action;\r\n        switch (type) {\r\n            // LIST UPDATE OF ITS NAME\r\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\r\n                return setStore({\r\n                    idNamePairs: payload.idNamePairs,\r\n                    currentList: payload.playlist,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false\r\n                });\r\n            }\r\n            // STOP EDITING THE CURRENT LIST\r\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: null,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false\r\n                })\r\n            }\r\n            // CREATE A NEW LIST\r\n            case GlobalStoreActionType.CREATE_NEW_LIST: {\r\n                return setStore({\r\n                    idNamePairs: payload.idNamePairs,\r\n                    currentList: payload.playlist,\r\n                    newListCounter: store.newListCounter + 1,\r\n                    listNameActive: false\r\n                })\r\n            }\r\n            // DELETE A LIST\r\n            case GlobalStoreActionType.DELETE_LIST: {\r\n                return setStore({\r\n                    idNamePairs: payload,\r\n                    currentList: null,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                });\r\n            }\r\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\r\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\r\n                return setStore({\r\n                    idNamePairs: payload,\r\n                    currentList: null,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false\r\n                });\r\n            }\r\n            // PREPARE TO DELETE A LIST\r\n            case GlobalStoreActionType.MARK_LIST_FOR_DELETION: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: null,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false\r\n                });\r\n            }\r\n            // UPDATE A LIST\r\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: payload,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false\r\n                });\r\n            }\r\n            // START EDITING A LIST NAME\r\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: payload,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: true\r\n                });\r\n            }\r\n            default:\r\n                return store;\r\n        }\r\n    }\r\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\r\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \r\n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\r\n\r\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\r\n    store.changeListName = function (id, newName) {\r\n        // GET THE LIST\r\n        // (async () => {\r\n        //     try {\r\n        //         let res = await api.getPlaylistById(id);\r\n        //         if (res.data.success) {\r\n        //             let playlist = res.data.playlist;\r\n        //             res = await api.updatePlaylistById(playlist._id, {name: newName, songs: playlist.songs,});\r\n        //             if (res.data.success) {\r\n        //                 res = await api.getPlaylistPairs();\r\n        //                 let pairsArray = res.data.idNamePairs;\r\n        //                 storeReducer({\r\n        //                     type: GlobalStoreActionType.CHANGE_LIST_NAME,\r\n        //                     payload: {\r\n        //                         idNamePairs: pairsArray,\r\n        //                         playlist: { ...playlist, name: newName},\r\n        //                     },\r\n        //                 });\r\n        //             }\r\n        //             else {\r\n        //                 throw res;\r\n        //             }\r\n        //         }\r\n        //     } \r\n        //     catch (exception) \r\n        //     {\r\n        //         console.log(exception)\r\n        //     }\r\n        // })();\r\n        async function asyncChangeListName(id) {\r\n            let response = await api.getPlaylistById(id);\r\n            if (response.data.success) {\r\n                let playlist = response.data.playlist;\r\n                playlist.name = newName;\r\n                async function updateList(playlist) {\r\n                    response = await api.updatePlaylistById(playlist._id, {name: newName, songs: playlist.songs});\r\n                    if (response.data.success) {\r\n                        async function getListPairs(playlist) {\r\n                            response = await api.getPlaylistPairs();\r\n                            if (response.data.success) {\r\n                                let pairsArray = response.data.idNamePairs;\r\n                                storeReducer({\r\n                                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\r\n                                    payload: {\r\n                                        idNamePairs: pairsArray,\r\n                                        playlist: playlist\r\n                                    }\r\n                                });\r\n                            }\r\n                        }\r\n                        getListPairs(playlist);\r\n                    }\r\n                }\r\n                updateList(playlist);\r\n            }\r\n        }\r\n        asyncChangeListName(id);\r\n    }\r\n\r\n    store.createNewList = function (playlist) {\r\n        (async () => {\r\n            try {\r\n                let res = await api.createPlaylist(playlist);\r\n                if (res.data.success) {\r\n                    let playlist = res.data.playlist;\r\n                    res = await api.getPlaylistPairs();\r\n                    if (res.data.success) {\r\n                        let pairsArray = res.data.idNamePairs;\r\n                        storeReducer({\r\n                            type: GlobalStoreActionType.CREATE_NEW_LIST,\r\n                            payload: {\r\n                                idNamePairs: pairsArray,\r\n                                playlist: playlist,\r\n                            },\r\n                        });\r\n                    }\r\n                }\r\n            } catch (exception) {\r\n                console.error(exception);\r\n            }\r\n        })();\r\n    };\r\n\r\n    store.setIsListNameEditActive = function (id) {\r\n        (async () => {\r\n            let response = await api.getPlaylistById(id);\r\n            if (response.data.success) {\r\n                let playlist = response.data.playlist;\r\n                storeReducer({\r\n                    type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\r\n                    payload: playlist,\r\n                });\r\n            }\r\n        })();\r\n    };\r\n\r\n    store.deleteListById = function (id) {\r\n        async function asyncDeleteListById(id) {\r\n            let response = await api.deletePlaylistById(id);\r\n                if (response.data.success) {\r\n                    response = await api.getPlaylistPairs();\r\n                    if (response.data.success) {\r\n                        let pairsArray = response.data.idNamePairs;\r\n                        storeReducer({\r\n                            type: GlobalStoreActionType.DELETE_LIST,\r\n                            payload: pairsArray,\r\n                        });\r\n                    }\r\n                }\r\n        } asyncDeleteListById(id);\r\n    };\r\n\r\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\r\n    store.closeCurrentList = function () {\r\n        storeReducer({\r\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\r\n            payload: {}\r\n        });\r\n    }\r\n\r\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\r\n    store.loadIdNamePairs = function () {\r\n        async function asyncLoadIdNamePairs() {\r\n            const response = await api.getPlaylistPairs();\r\n            if (response.data.success) {\r\n                let pairsArray = response.data.idNamePairs;\r\n                storeReducer({\r\n                    type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\r\n                    payload: pairsArray\r\n                });\r\n            }\r\n            else {\r\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\r\n            }\r\n        }\r\n        asyncLoadIdNamePairs();\r\n    }\r\n\r\n    store.setCurrentList = function (id) {\r\n        async function asyncSetCurrentList(id) {\r\n            let response = await api.getPlaylistById(id);\r\n            if (response.data.success) {\r\n                let playlist = response.data.playlist;\r\n\r\n                if (response.data.success) {\r\n                    storeReducer({\r\n                        type: GlobalStoreActionType.SET_CURRENT_LIST,\r\n                        payload: playlist\r\n                    });\r\n                    store.history.push(\"/playlist/\" + playlist._id);\r\n                }\r\n            }\r\n        }\r\n        asyncSetCurrentList(id);\r\n    }\r\n    store.updateCurrentList = function (id, playlist) {\r\n        async function asyncUpdateCurrentList(id, playlist) {\r\n            let response = await api.updatePlaylistById(id, playlist);\r\n            if (response.data.success) {\r\n                response = await api.getPlaylistById(id);\r\n                if (response.data.success) {\r\n                    let playlist = response.data.playlist;\r\n                    if (response.data.success) {\r\n                        storeReducer({\r\n                            type: GlobalStoreActionType.SET_CURRENT_LIST,\r\n                            payload: playlist,\r\n                        })\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        asyncUpdateCurrentList(id, playlist)\r\n    }\r\n    store.getPlaylistSize = function() {\r\n        return store.currentList.songs.length;\r\n    }\r\n    store.undo = function () {\r\n        tps.undoTransaction();\r\n    }\r\n    store.redo = function () {\r\n        tps.doTransaction();\r\n    }\r\n\r\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\r\n    store.setlistNameActive = function () {\r\n        storeReducer({\r\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\r\n            payload: null\r\n        });\r\n    }\r\n\r\n    store.moveSong = function (sourceId, targetId) {\r\n        if (sourceId !== targetId) {\r\n            let playlist = store.currentList;\r\n            let songs = playlist.songs;\r\n            let temp = songs[targetId];\r\n\r\n            const name = playlist.name;\r\n            const id = playlist._id;\r\n\r\n            songs[targetId] = songs[sourceId];\r\n            songs[sourceId] = temp\r\n\r\n            store.updateCurrentList(id, {\r\n                name,\r\n                songs,\r\n            });\r\n        }\r\n    }\r\n\r\n    store.editSong = function (index, song) {\r\n        let playlist = store.currentList;\r\n        let songs = playlist.songs;\r\n\r\n        const name = playlist.name;\r\n        const id = playlist._id;\r\n        \r\n        songs[index] = song;\r\n\r\n        store.updateCurrentList(id, {\r\n            name,\r\n            songs,\r\n        });\r\n    }\r\n\r\n    store.addSong = function (index, song) {\r\n        let playlist = store.currentList;\r\n        let newSongs = [];\r\n\r\n        const name = playlist.name;\r\n        const id = playlist._id;\r\n\r\n        for (let i = 0; i < index; i++) {\r\n            newSongs.push(playlist.songs[i]);\r\n        }\r\n\r\n        newSongs.push(song);\r\n\r\n        for (let i = index; i < playlist.songs.length; i++) {\r\n            newSongs.push(playlist.songs[i]);\r\n        }\r\n\r\n        store.updateCurrentList(id, {\r\n            name,\r\n            songs: newSongs,\r\n        });\r\n    }\r\n\r\n    store.deleteSong = function (index) {\r\n        let playlist = store.currentList;\r\n        let songs = [...playlist.songs];\r\n\r\n        const name = playlist.name;\r\n        const id = playlist._id;\r\n\r\n        songs.splice(index, 1);\r\n\r\n        store.updateCurrentList(id, {\r\n            name,\r\n            songs,\r\n        });\r\n    }\r\n\r\n    // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\r\n    return { store, tps, storeReducer };\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}